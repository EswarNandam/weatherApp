{"version":3,"sources":["hooks/useWeatherMapAPI.js","helpers/utils.js","components/barChat.js","components/weatherCarousel.js","components/loading.js","App.js","reportWebVitals.js","index.js"],"names":["useWeatherMapApi","initialCity","useState","data","setData","isLoading","setIsLoading","isError","setIsError","avgTemp","weatherListData","totalTemp","forEach","element","temperature","length","fetchData","city","a","axios","get","then","catch","err","result","console","log","groupedByDays","list","map","item","date","Date","dt_txt","day","toLocaleDateString","hour","toLocaleTimeString","replace","id","weather","main","temp","celsiusTemperature","getDay","groupingByDate","reduce","h","obj","concat","sortedDataSet","Object","keys","sort","b","finalData","key","items","avgTempCelsius","useEffect","BarChat","selectedValue","BarChart","width","height","margin","top","right","left","bottom","XAxis","dataKey","Label","value","offset","position","YAxis","label","angle","CartesianGrid","strokeDasharray","Tooltip","Bar","barSize","fill","Legend","align","verticalAlign","useeStyles","makeStyles","root","minWidth","border","justifyContent","display","flexDirection","textAlign","transition","selectedCard","transform","boxShadow","bullet","title","fontSize","pos","marginBottom","renderSlides","weatherData","currentIndex","classes","index","Card","className","CardContent","Math","trunc","WeatherCarousel","setCurrentIndex","additionalTransfrom","arrows","autoPlaySpeed","centerMode","containerClass","dotListClass","draggable","focusOnSelect","afterChange","previousSlide","_ref","currentSlide","itemClass","keyBoardControl","minimumTouchDrag","slidesToShow","renderButtonGroupOutside","renderDotsOutside","responsive","desktop","breakpoint","max","min","partialVisibilityGutter","mobile","tablet","showDots","sliderClass","slidesToSlide","swipeable","Loading","App","React","setSelectedValue","cityName","setCityName","useOpenWeatherMapApi","style","TextField","variant","onChange","e","target","autoComplete","Button","color","onClick","RadioGroup","name","row","FormControlLabel","control","Radio","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d06377ec.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { API_HOST, API_KEY, promise } from '../helpers/utils';\r\n\r\n\r\nconst useWeatherMapApi = initialCity => {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    const avgTemp = (weatherListData) => {\r\n        let totalTemp = 0;\r\n        weatherListData.forEach(element => {\r\n            totalTemp += element.temperature\r\n        });\r\n        return totalTemp / weatherListData.length;\r\n    }\r\n\r\n    const fetchData = async (city) => {\r\n        setIsError(false);\r\n        setIsLoading(true);\r\n\r\n        const [err, result] = await promise(\r\n            axios.get(\r\n                `${API_HOST}/forecast?q=${city}&mode=json&units=metric&appid=${API_KEY}`\r\n            )\r\n        );\r\n\r\n        if (err) {\r\n            setIsLoading(false);\r\n            setData([]);\r\n            console.log(err);\r\n            return setIsError(true);\r\n        }\r\n        const data = result.data;\r\n        const groupedByDays = data.list\r\n            .map(item => {\r\n                const date = new Date(item.dt_txt);\r\n                const day = date.toLocaleDateString();\r\n                const hour = date.toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, \"$1$3\");\r\n                return {\r\n                    date: day,\r\n                    id: item.weather[0],\r\n                    temperature: item.main.temp,\r\n                    celsiusTemperature: (item.main.temp - 32) * (5 / 9),\r\n                    day: new Date(item.dt_txt.replace(/-/g, \"/\")).getDay(),\r\n                    hour: hour,\r\n                }\r\n            });\r\n        const groupingByDate = groupedByDays.reduce(function (h, obj) {\r\n            h[obj.date] = (h[obj.date] || []).concat(obj);\r\n            return h;\r\n        }, []);\r\n        // Sort by dates and return with array format\r\n        const sortedDataSet = Object.keys(groupingByDate)\r\n            .sort(function (a, b) {\r\n                return new Date(b[0].date) - new Date(a[0].date);\r\n            });\r\n\r\n        const finalData = sortedDataSet.map(key => ({\r\n            date: key, items: groupingByDate[key],\r\n            avgTemp: avgTemp(groupingByDate[key]),\r\n            avgTempCelsius: (avgTemp(groupingByDate[key]) - 32) * (5 / 9),\r\n        }));\r\n        setData(finalData);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData(initialCity);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return {\r\n        data,\r\n        isError,\r\n        fetchData,\r\n        isLoading\r\n    };\r\n};\r\n\r\nexport default useWeatherMapApi;\r\n","export const API_HOST = \"https://api.openweathermap.org/data/2.5\";\r\nexport const API_KEY = \"75f972b80e26f14fe6c920aa6a85ad57&\";\r\n\r\nexport const promise = promise => {\r\n    return promise\r\n      .then(data => {\r\n        return [null, data];\r\n      })\r\n      .catch(err => [err]);\r\n  };\r\n\r\nexport const actionCreator = (type, payload = null) => ({ type, payload });","import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\r\n\r\n\r\n\r\nexport default function BarChat({data, selectedValue}) {\r\n    console.log(selectedValue);\r\n    return (\r\n        <BarChart width={800} height={400} data={data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 15 }}>\r\n            <XAxis dataKey=\"hour\">\r\n            <Label value=\"Time\" offset={0} position=\"bottom\" />\r\n            </XAxis>\r\n            <YAxis dataKey={selectedValue === 'celsius' ? 'celsiusTemperature' : 'temperature'} label={{ value: `Temperature (${selectedValue === 'celsius' ? 'C' : 'F'})`, angle: -90, position: 'left' }} />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Bar dataKey={selectedValue === 'celsius' ? 'celsiusTemperature' : 'temperature'} barSize={20} fill=\"#8884d8\" />\r\n            <Legend align=\"right\" verticalAlign=\"bottom\"/>\r\n        </BarChart>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport Carousel from 'react-multi-carousel';\r\n\r\nconst useeStyles = makeStyles({\r\n    root: {\r\n        minWidth: 300,\r\n        height: 200,\r\n        border: '1px solid black',\r\n        justifyContent: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        textAlign: 'start',\r\n        margin: 20,\r\n        transition: 'all .5s ease-in-out',\r\n    },\r\n    selectedCard: {\r\n        transform: 'scale(1.03)',\r\n        boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\nfunction renderSlides(weatherData, selectedValue, currentIndex) {\r\n    const classes = useeStyles();\r\n    return (\r\n        weatherData && weatherData.map((data, index) => (\r\n            <div key={index}>\r\n                <Card className={`${classes.root} ${currentIndex === index && classes.selectedCard}`}>\r\n                    <CardContent className={classes.title}>\r\n                        <div><b>Temp: </b>{selectedValue === 'celsius' ? `${Math.trunc(data.avgTempCelsius)} C` : `${Math.trunc(data.avgTemp)} F`}</div>\r\n                        <br />\r\n                        <div><b>Date: </b>{data.date}</div>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        )))\r\n};\r\n\r\nexport default function WeatherCarousel({data, selectedValue, currentIndex, setCurrentIndex}) {\r\n    return (\r\n            <Carousel\r\n                additionalTransfrom={0}\r\n                arrows\r\n                autoPlaySpeed={3000}\r\n                centerMode\r\n                className=\"\"\r\n                containerClass=\"container\"\r\n                dotListClass=\"\"\r\n                draggable\r\n                focusOnSelect={true}\r\n                afterChange={(previousSlide, _ref) => setCurrentIndex(_ref.currentSlide)}\r\n                itemClass=\"\"\r\n                keyBoardControl\r\n                minimumTouchDrag={80}\r\n                slidesToShow={2}\r\n                renderButtonGroupOutside={false}\r\n                renderDotsOutside={false}\r\n                responsive={{\r\n                    desktop: {\r\n                        breakpoint: {\r\n                            max: 3000,\r\n                            min: 1024\r\n                        },\r\n                        items: 3,\r\n                        partialVisibilityGutter: 40\r\n                    },\r\n                    mobile: {\r\n                        breakpoint: {\r\n                            max: 464,\r\n                            min: 0\r\n                        },\r\n                        items: 1,\r\n                        partialVisibilityGutter: 30\r\n                    },\r\n                    tablet: {\r\n                        breakpoint: {\r\n                            max: 1024,\r\n                            min: 464\r\n                        },\r\n                        items: 2,\r\n                        partialVisibilityGutter: 30\r\n                    }\r\n                }}\r\n                showDots={false}\r\n                sliderClass=\"\"\r\n                slidesToSlide={1}\r\n                swipeable\r\n            >\r\n                {renderSlides(data, selectedValue, currentIndex)}\r\n            </Carousel>\r\n        );\r\n};","import React from 'react'\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div>\r\n            <h1>Loading....</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport 'react-multi-carousel/lib/styles.css';\nimport useOpenWeatherMapApi from './hooks/useWeatherMapAPI';\nimport { TextField, Button, Radio } from '@material-ui/core';\nimport BarChat from './components/barChat';\nimport WeatherCarousel from './components/weatherCarousel';\nimport Loading from './components/loading';\n\nfunction App() {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [selectedValue, setSelectedValue] = React.useState('fahrenheit');\n    const [cityName, setCityName] = useState('Munich');\n    const { isLoading, data, fetchData } = useOpenWeatherMapApi(cityName);\n\n    return (\n        <div className=\"App\">\n            {\n                isLoading ?\n                    <Loading />\n                    :\n                    <>\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <TextField id=\"outlined-basic\" label=\"Enter City Name\" variant=\"outlined\" onChange={e => setCityName(e.target.value)} value={cityName} autoComplete=\"off\" />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setSelectedValue('fahrenheit');\n                                    fetchData(cityName);\n                                }}\n                            >\n                                GO\n                                </Button>\n                        </div>\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <RadioGroup aria-label=\"tempType\" name=\"tempType\" row value={selectedValue} onChange={(e) => setSelectedValue(e.target.value)}>\n                                <FormControlLabel value=\"fahrenheit\" control={<Radio />} label=\"Fahrenheit\" />\n                                <FormControlLabel value=\"celsius\" control={<Radio />} label=\"Celsius\" />\n                            </RadioGroup>\n                        </div>\n                        <WeatherCarousel\n                            setCurrentIndex={setCurrentIndex}\n                            data={data}\n                            selectedValue={selectedValue}\n                            currentIndex={currentIndex}\n                        />\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <BarChat data={data[currentIndex || 0]?.items} selectedValue={selectedValue} />\n                        </div>\n                    </>\n            }\n        </div>\n\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}